import { GetServerSideProps } from "next";
import { AxiosResponse } from "axios";
import Head from "next/head";
import React from "react";
import qs from "qs";

import { fetchArticleBySlug } from "../../http";
import { formatDate, serializeMarkdown } from "../../utils";
import { IArticle, ICollectionResponse } from "../../types";

import { MDXRemote, MDXRemoteSerializeResult } from "next-mdx-remote";
import Image from "next/image";

interface IPropType {
  article: IArticle;
  notFound?: boolean;
}

const slug = ({ article, notFound = false }: IPropType) => {
  return (
    <>
      <Head>
        <title>{article.attributes.Title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="grid lg:grid-cols-3 md:gap-12 single-article">
        {/* LEFT  */}
        <div className="col-span-2">
          <h1 className="text-3xl font-bold py-2">
            {article.attributes.Title}
          </h1>
          <div className="flex items-center my-2">
            <div className="mr-2">
              <img
                className="inline-block h-8 w-8 rounded-full ring-2 ring-white"
                src={`http://localhost:1337${article.attributes.author.data.attributes.avatar.data.attributes.formats.thumbnail.url}`}
                height={40}
                width={40}
                alt={article.attributes.author.data.attributes.firstname}
              />
            </div>
            <span className="text-md font-bold text-gray-600">
              {article.attributes.author.data.attributes.firstname}{" "}
              <span className="text-sm">
                {article.attributes.author.data.attributes.lastname} on &nbsp;
              </span>
              <span className="text-gray-400 font-normal text-sm">
                {formatDate(article.attributes.createdAt)}
              </span>
            </span>
          </div>

          <div className="text-lg w-full h-full  text-gray-600 leading-8">
            <Image
              // className="w-full mb-6"
              width={1000}
              height={1000}
              src={`http://localhost:1337${article.attributes.Image.data.attributes.url}`}
              alt={article.attributes.Title}
            />
            <MDXRemote
              {...(article.attributes.body as MDXRemoteSerializeResult)}
            />
          </div>
        </div>
        {/* RIGHT */}
        <div className="md:mt-[5.3rem]">
          <h2 className="font-bold text-gray-600 text-lg">
            Signup to our newsletter
          </h2>
          <p className="mt-4 text-gray-500">
            Get the latest article on all things data delivered straight to your
            inbox
          </p>
          <input
            className="border w-full p-2 pl-3 my-6 outline-primary"
            type="email"
            placeholder="example123@gmail.com"
          />
          <button className="border-2 border-primary hover:bg-primary hover:text-white transition-all duration-200 ease-in-out rounded py-1 px-6 text-primary font-bold">
            Subscribe
          </button>
          <hr className="md:my-6 border-gray-100" />
          <span className="inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start">
            <a className="text-gray-500 cursor-pointer bg-gray-50 p-2 rounded-full hover:bg-gray-200  transition-all duration-200 ease-in-out">
              <svg
                fill="currentColor"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                className="w-5 h-5"
                viewBox="0 0 24 24"
              >
                <path d="M18 2h-3a5 5 0 00-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 011-1h3z"></path>
              </svg>
            </a>
            <a className="ml-3 text-gray-500 cursor-pointer bg-gray-50 p-2 rounded-full hover:bg-gray-200  transition-all duration-200 ease-in-out">
              <svg
                fill="currentColor"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                className="w-5 h-5"
                viewBox="0 0 24 24"
              >
                <path d="M23 3a10.9 10.9 0 01-3.14 1.53 4.48 4.48 0 00-7.86 3v1A10.66 10.66 0 013 4s-4 9 5 13a11.64 11.64 0 01-7 2c9 5 20 0 20-11.5a4.5 4.5 0 00-.08-.83A7.72 7.72 0 0023 3z"></path>
              </svg>
            </a>
            <a className="ml-3 text-gray-500 cursor-pointer bg-gray-50 p-2 rounded-full hover:bg-gray-200  transition-all duration-200 ease-in-out">
              <svg
                fill="none"
                stroke="currentColor"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                className="w-5 h-5"
                viewBox="0 0 24 24"
              >
                <rect width="20" height="20" x="2" y="2" rx="5" ry="5"></rect>
                <path d="M16 11.37A4 4 0 1112.63 8 4 4 0 0116 11.37zm1.5-4.87h.01"></path>
              </svg>
            </a>
            <a className="ml-3 text-gray-500 cursor-pointer bg-gray-50 p-2 rounded-full hover:bg-gray-200  transition-all duration-200 ease-in-out">
              <svg
                fill="currentColor"
                stroke="currentColor"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="0"
                className="w-5 h-5"
                viewBox="0 0 24 24"
              >
                <path
                  stroke="none"
                  d="M16 8a6 6 0 016 6v7h-4v-7a2 2 0 00-2-2 2 2 0 00-2 2v7h-4v-7a6 6 0 016-6zM2 9h4v12H2z"
                ></path>
                <circle cx="4" cy="4" r="2" stroke="none"></circle>
              </svg>
            </a>
          </span>
          <hr className="md:my-6 border-gray-100" />
        </div>
      </div>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const queryString = qs.stringify({
    populate: ["Image", "author.avatar"],
    filters: {
      Slug: {
        $eq: query.slug,
      },
    },
  });

  const { data: article }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArticleBySlug(queryString);
  if (article.data.length === 0) {
    return {
      notFound: true,
    };
  }
  return {
    props: {
      article: await serializeMarkdown(article.data[0]),
    },
  };
};

export default slug;
